---
description: 
globs: 
alwaysApply: true
---
#  AI Agent Service 项目介绍

## 项目概述
实现一个代理采购网站的AI大脑,可以回复客户的消息，并记录排期各种任务，配合仓库的人员完成网站的运作
1. 客服模块: 常驻一个浏览器定时监测用户的whatsapp消息,收到用户消息后使用AI工具完成分析回复用户

### 项目描述
是一个完整的AI智能体服务工具包，基于LangGraph、FastAPI

### 核心功能
- 🎯 **LangGraph智能体**: 可定制的智能体，支持LangGraph v0.3最新特性
- 🚀 **FastAPI服务**: 提供流式和非流式端点
- 🔄 **多智能体支持**: 支持运行多个智能体实例
- ⚡ **异步设计**: 高效处理并发请求
- 🛡️ **内容审核**: 集成LlamaGuard内容审核功能
- 📊 **反馈机制**: 集成LangSmith的评分反馈系统
- 🐳 **Docker支持**: 完整的容器化解决方案
- 🌐 **浏览器自动化**: 基于Playwright的Web自动化能力
## 🏗️ 架构设计

### 目录结构
```
├── src/                    # 主要源代码
│   ├── agents/            # 智能体定义
│   ├── schema/            # 协议架构定义
│   ├── core/              # 核心模块（LLM定义、设置）
│   ├── service/           # FastAPI服务
│   ├── client/            # 客户端交互
│   ├── memory/            # 内存管理
│   ├── streamlit_app.py   # Streamlit应用
│   └── run_*.py           # 运行脚本
├── tests/                 # 单元和集成测试
├── docker/               # Docker配置
├── media/                # 媒体资源
└── .github/              # GitHub工作流
```

### 技术栈
- **后端框架**: FastAPI
- **智能体框架**: LangGraph
- **前端界面**: Streamlit  
- **数据处理**: Pydantic
- **浏览器自动化**: Playwright
- **数据库**: PostgreSQL (可选)
- **容器化**: Docker & Docker Compose
- **包管理**: uv

## 📋 编码规范

### Python编码标准

#### 1. 代码风格
- **格式化工具**: Ruff (替代Black + isort)
- **行长度**: 100字符
- **Python版本**: >= 3.11
- **类型注解**: 强制使用类型提示

#### 2. 代码质量工具
```yaml
# 使用的工具链
- ruff: 代码格式化和linting
- pre-commit: 提交前代码检查
- pytest: 单元测试
- pytest-cov: 测试覆盖率
```

#### 3. Import规范
```python
# 标准库导入
import os
import sys

# 第三方库导入
import fastapi
import langchain
from pydantic import BaseModel

# 本地模块导入
from .core import settings
from .schema import types
```

#### 4. 命名约定
- **文件名**: 使用下划线分隔 (snake_case)
- **类名**: 使用驼峰命名 (PascalCase)
- **函数/变量名**: 使用下划线分隔 (snake_case)
- **常量**: 全大写下划线分隔 (UPPER_SNAKE_CASE)

#### 5. 文档规范
```python
def function_example(param1: str, param2: int) -> bool:
    """
    函数功能的简短描述。
    
    Args:
        param1: 参数1的描述
        param2: 参数2的描述
        
    Returns:
        返回值的描述
        
    Raises:
        Exception: 异常情况的描述
    """
    pass
```

### 异步编程规范

#### 1. 异步函数定义
```python
async def async_function() -> Any:
    """异步函数必须使用async/await模式"""
    result = await some_async_operation()
    return result
```

#### 2. 异步上下文管理
```python
async with AsyncClient() as client:
    response = await client.get("/api/endpoint")
```

### FastAPI开发规范

#### 1. 路由定义
```python
@app.post("/api/v1/resource", response_model=ResponseModel)
async def create_resource(
    request: RequestModel,
    current_user: User = Depends(get_current_user)
) -> ResponseModel:
    """RESTful API端点定义"""
    pass
```

#### 2. 依赖注入
```python
def get_database() -> Database:
    """依赖注入的数据库连接"""
    return Database()

@app.get("/users")
async def get_users(db: Database = Depends(get_database)):
    return await db.get_users()
```

### Playwright浏览器自动化规范

#### 1. 基础配置
```python
from playwright.async_api import async_playwright, Browser, Page

class BrowserManager:
    """浏览器管理器"""
    
    def __init__(self):
        self.playwright = None
        self.browser: Browser = None
        
    async def start(self, headless: bool = True):
        """启动浏览器"""
        self.playwright = await async_playwright().start()
        self.browser = await self.playwright.chromium.launch(
            headless=headless,
            args=['--no-sandbox', '--disable-dev-shm-usage']
        )
        
    async def close(self):
        """关闭浏览器"""
        if self.browser:
            await self.browser.close()
        if self.playwright:
            await self.playwright.stop()
```
### Git工作流规范

#### 1. 分支命名
- `feature/功能名称`: 新功能开发
- `bugfix/问题描述`: 问题修复
- `hotfix/紧急修复`: 紧急修复
- `refactor/重构内容`: 代码重构

#### 2. 提交信息
```
type(scope): 简短描述

详细描述（可选）

Closes #issue_number
```

类型标识:
- `feat`: 新功能
- `fix`: 问题修复  
- `docs`: 文档更新
- `style`: 代码格式调整
- `refactor`: 代码重构
- `test`: 测试相关
- `chore`: 构建/工具相关

### 环境配置规范

#### 1. 环境变量管理
```python
# 使用Pydantic Settings管理配置
class Settings(BaseSettings):
    openai_api_key: str = Field(..., description="OpenAI API密钥")
    database_url: str = Field(default="sqlite:///./test.db")
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8"
    )
```

#### 2. 依赖管理
- 使用 `uv` 进行包管理
- `pyproject.toml` 定义项目配置
- 区分开发依赖和生产依赖

#### 3. Playwright环境配置
```python
# Playwright相关环境变量
class PlaywrightSettings(BaseSettings):
    # 浏览器配置
    browser_headless: bool = Field(default=True, description="是否无头模式运行")
    browser_timeout: int = Field(default=30000, description="浏览器操作超时时间(ms)")
    browser_user_agent: str = Field(default="", description="自定义User-Agent")
    
    # 平台配置
    whatsapp_session_path: str = Field(default="./sessions/whatsapp", description="WhatsApp会话存储路径")
    telegram_session_path: str = Field(default="./sessions/telegram", description="Telegram会话存储路径")
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_prefix="PLAYWRIGHT_"
    )
```

## 🚀 开发流程

### 1. 环境搭建
使用dockerfile 启动容器，共享文件到容器内进行开发

docker/Dockerfile.service
# Use the base image with all dependencies pre-installed
FROM agent-service-base:latest

WORKDIR /app

# Copy application code
COPY src/agents/ ./agents/
COPY src/core/ ./core/
COPY src/memory/ ./memory/
COPY src/schema/ ./schema/
COPY src/service/ ./service/
COPY src/run_service.py .

CMD ["python", "run_service.py"]


### 模块引用参考
from agents import DEFAULT_AGENT, get_agent, get_all_agent_info
from core import settings


### 构建客服系统模块
1. **多平台支持**: 集成WhatsApp
2. **智能对话**: 结合LangGraph智能体进行自动客服回复
3. **浏览器自动化**: 使用Playwright实现Web端聊天平台的自动化操作
4. **消息队列**: 处理高并发的客服请求
5. **会话管理**: 维护多个客户的对话状态

## 📚 参考资源

- @LangGraph官方文档
- [FastAPI官方文档](mdc:https:/langchain-ai.github.io/langgraph)
- [Streamlit官方](mdc:https:/fastapi.tiangolo.com)文档
- [Pydantic官方文档](mdc:https:/streamlit.io)
- [Playwright官方](mdc:https:/docs.pydantic.dev)文档

---

*最后更新: 2024年*


