---
description: 
globs: 
alwaysApply: true
---
# AI Agent Service Python 编码规范

## 项目背景
AI Agent Service是一个基于LangGraph和FastAPI的跨境代购电商平台AI大脑，主要功能包括：
- WhatsApp消息监控和自动回复
- 多智能体协作处理客户需求
- 浏览器自动化操作
- 任务排期和管理

## 核心编码原则

### 1. 专注性原则
- **单一职责**: 每个函数/类只处理一个明确的功能
- **避免过度设计**: 只实现当前需求，不添加不必要的功能
- **直接解决问题**: 代码应该直接解决用户提出的具体问题

### 2. 项目特定规范

#### 异步编程优先
```python
# ✅ 正确：使用异步函数
async def handle_whatsapp_message(message: str) -> str:
    """处理WhatsApp消息"""
    response = await agent.process_message(message)
    return response

# ❌ 错误：同步函数处理异步操作
def handle_whatsapp_message(message: str) -> str:
    response = agent.process_message(message)  # 阻塞操作
    return response
```

#### LangGraph智能体集成
```python
# ✅ 正确：遵循项目智能体模式
from agents import get_agent, DEFAULT_AGENT
from schema.models import AgentRequest, AgentResponse

async def process_with_agent(request: AgentRequest) -> AgentResponse:
    """使用项目智能体处理请求"""
    agent = get_agent(request.agent_type or DEFAULT_AGENT)
    result = await agent.ainvoke(request.dict())
    return AgentResponse(**result)
```

#### Playwright浏览器操作
```python
# ✅ 正确：使用项目浏览器管理
from client.browser_client import BrowserManager

class WhatsAppMonitor:
    def __init__(self):
        self.browser_manager = BrowserManager()
    
    async def start_monitoring(self):
        """启动WhatsApp监控"""
        await self.browser_manager.start(headless=False)
        page = await self.browser_manager.browser.new_page()
        await page.goto("https://web.whatsapp.com")
        # 专注实现监控逻辑
```

### 3. 导入规范

#### 项目模块导入顺序
```python
# 1. 标准库
import asyncio
import logging
from typing import Optional, Dict, Any

# 2. 第三方库
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from langgraph.graph import StateGraph

# 3. 项目模块 (按重要性排序)
from core import settings
from schema.models import AgentRequest, AgentResponse
from agents import get_agent, DEFAULT_AGENT
from client.browser_client import BrowserManager
from memory.postgres import PostgresMemory
```

### 4. 类型注解规范

#### 强制类型注解
```python
# ✅ 正确：完整的类型注解
async def process_customer_request(
    customer_id: str,
    message: str,
    agent_type: Optional[str] = None
) -> Dict[str, Any]:
    """处理客户请求"""
    pass

# ❌ 错误：缺少类型注解
async def process_customer_request(customer_id, message, agent_type=None):
    pass
```

#### 使用项目类型
```python
# ✅ 正确：使用项目定义的类型
from schema.models import AgentRequest, AgentResponse, CustomerMessage

async def handle_customer_message(
    message: CustomerMessage
) -> AgentResponse:
    """处理客户消息"""
    pass
```

### 5. 错误处理规范

#### 异步异常处理
```python
# ✅ 正确：异步异常处理
async def safe_browser_operation():
    try:
        await browser_manager.perform_operation()
    except Exception as e:
        logger.error(f"浏览器操作失败: {e}")
        # 专注处理当前错误，不添加额外逻辑
        raise HTTPException(status_code=500, detail="操作失败")
```

#### 智能体错误处理
```python
# ✅ 正确：智能体错误处理
async def run_agent_safely(request: AgentRequest) -> AgentResponse:
    try:
        agent = get_agent(request.agent_type)
        result = await agent.ainvoke(request.dict())
        return AgentResponse(**result)
    except Exception as e:
        logger.error(f"智能体执行失败: {e}")
        return AgentResponse(
            success=False,
            error_message=str(e)
        )
```

### 6. 配置管理规范

#### 使用项目配置
```python
# ✅ 正确：使用项目配置系统
from core.settings import settings

class WhatsAppService:
    def __init__(self):
        self.session_path = settings.whatsapp_session_path
        self.timeout = settings.browser_timeout
        self.headless = settings.browser_headless
```

### 7. 日志规范

#### 项目日志格式
```python
import logging

logger = logging.getLogger(__name__)

# ✅ 正确：项目日志格式
async def process_message(message: str):
    logger.info(f"开始处理消息: {message[:50]}...")
    try:
        result = await agent.process(message)
        logger.info(f"消息处理成功: {result}")
        return result
    except Exception as e:
        logger.error(f"消息处理失败: {e}")
        raise
```

### 8. 文档规范

#### 函数文档
```python
async def handle_whatsapp_message(
    message: str,
    customer_id: str
) -> Dict[str, Any]:
    """
    处理WhatsApp消息并返回AI回复
    
    Args:
        message: 客户发送的消息内容
        customer_id: 客户唯一标识
        
    Returns:
        包含AI回复的字典
        
    Raises:
        HTTPException: 当消息处理失败时
    """
    pass
```

### 9. 测试规范

#### 除非用户要求，否则不编写测试
```python
# 专注实现核心功能，不添加测试代码
# 只有在用户明确要求时才编写测试脚本
```

### 10. 代码组织规范

#### 文件结构
```python
# 文件开头：导入和配置
import asyncio
from typing import Optional
from core import settings
from agents import get_agent

# 类定义
class ServiceClass:
    """服务类，专注单一功能"""
    
    def __init__(self):
        """初始化，只设置必要的属性"""
        self.agent = get_agent()
    
    async def main_method(self, param: str) -> str:
        """主要方法，直接解决问题"""
        result = await self.agent.process(param)
        return result

# 文件结尾：主要执行逻辑（如果需要）
async def main():
    """主函数，简洁明了"""
    service = ServiceClass()
    result = await service.main_method("test")
    print(result)
```

### 11. 性能优化规范

#### 异步操作优化
```python
# ✅ 正确：并发处理多个请求
async def process_multiple_messages(messages: List[str]) -> List[str]:
    """并发处理多个消息"""
    tasks = [process_single_message(msg) for msg in messages]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    return [r for r in results if not isinstance(r, Exception)]
```

### 12. 安全规范

#### 输入验证
```python
# ✅ 正确：验证输入数据
from pydantic import ValidationError

async def safe_process_request(data: Dict[str, Any]) -> AgentResponse:
    """安全处理请求"""
    try:
        request = AgentRequest(**data)
        return await process_with_agent(request)
    except ValidationError as e:
        logger.error(f"输入验证失败: {e}")
        raise HTTPException(status_code=400, detail="无效的请求数据")
```

## 总结

遵循以上规范，确保：
1. **专注性**: 代码直接解决用户问题，不添加无关功能
2. **项目一致性**: 使用项目现有的架构和模式
3. **异步优先**: 充分利用异步编程提高性能
4. **类型安全**: 完整的类型注解确保代码质量
5. **错误处理**: 适当的异常处理保证系统稳定性
6. **可维护性**: 清晰的代码结构和文档

记住：**只实现当前需求，保持代码简洁，专注于解决用户提出的具体问题**。 